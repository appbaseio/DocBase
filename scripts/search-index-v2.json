[
   {
      "title":"sample",
      "child":[
         {
            "title":"Quick Start to the ![Scalr](http://i.imgur.com/Eppz2lz.png?1) JS API\r",
            "link":"#-Quick-Start-to-the-![Scalr](http://i.imgur.com/Eppz2lz.png?1)-JS-API\r",
            "content":"\n# Quick Start to the ![Scalr](http://i.imgur.com/Eppz2lz.png?1) JS API\r\n\r\n[Appbase.JS](https://github.com/appbaseio/appbase-js) is a minimalistic library for data streams.  \r\n\r\nIt can:\r\n\r\n* Continuously stream updates to documents, queries or filters over ``websockets``.\r\n* Index new documents or update / delete existing ones.\r\n\r\nIt can't:  \r\n\r\n* Configure mappings, change analyzers, or capture snapshots. All these are provided by [elasticsearch.js](https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/index.html) - the official ElasticSearch JS client library.\r\n\r\n[Appbase](https://appbase.io) is opinionated about the cluster setup and doesn't support the ElasticSearch devops APIs.\r\n\r\nThis is a quick start guide to whet the appetite with the possibilities of data streams.\r\n\r"
         },
         {
            "title":"Step 0: Creating an App\r",
            "link":"#-Quick-Start-to-the-![Scalr](http://i.imgur.com/Eppz2lz.png?1)-JS-API\r-Step-0:-Creating-an-App\r",
            "content":"\n## Step 0: Creating an App\r\n\r\n<a href=\"https://imgflip.com/gif/opgl9\"><img src=\"https://i.imgflip.com/opgl9.gif\"/></a>  \r\nLog in to <span class=\"fa fa-external-link\"></span> [Appbase Dashboard](http://appbase.io/scalr/), and create a new app.\r\n\r\nFor this tutorial, we will use an app called \"createnewtestapp01\". The &lt;username>:&lt;password> combination for this app is RIvfxo1u1:dee8ee52-8b75-4b5b-be4f-9df3c364f59f.\r\n\r\n> SCALR uses *HTTP Basic Auth*, a widely used protocol for a simple username/password authentication.\r\n\r\n## Step 1: Lib Setup\r\n\r\nWe will fetch and install the **appbase-js** lib using [bower](http://bower.io). We will use ``v0.8.0`` for specificity. \r\n\r\n```js\r\nbower install appbase-js#0.8.0\r\n```\r\n\r\nRequiring the lib takes just one line of html script injection:\r\n\r\n```html\r\n<script src=\"bower_components/appbase-js/browser/appbase.js\"></script>\r\n```\r\n\r\nTo write data or stream updates from [appbase.io](https://appbase.io), we need to first create a reference object. We do this by passing the API URL, appname, and a username:password combination into the ``Appbase`` constructor:\r\n\r\n```js\r\nvar appbase = new Appbase({\r\n  url: 'https://scalr.api.appbase.io',\r\n  appname: 'createnewtestapp01',\r\n  username: 'RIvfxo1u1',\r\n  password: 'dee8ee52-8b75-4b5b-be4f-9df3c364f59f'\r\n});\r\n\r\n```\r\n\r\n**OR**\r\n\r\n```js\r\nvar appbase = new Appbase({\r\n  url: 'https://RIvfxo1u1:dee8ee52-8b75-4b5b-be4f-9df3c364f59f@scalr.api.appbase.io',\r\n  appname: 'createnewtestapp01'\r\n })\r\n```\r\n\r\nAlternatively, username:password can be passed as a part of the API URL in the constructor.\r\n\r\n\r\n\r\n## Step 2: Storing Data\r\n\r\nOnce we have the reference object (called ``appbase`` in this tutorial), we can insert any JSON object into it with the ``index()`` method.\r\n\r\n\r\n```js\r\nvar jsonObject = {\r\n    \"department_name\":\"Books\",\r\n    \"department_name_analyzed\":\"Books\",\r\n    \"department_id\":1,\r\n    \"name\":\"A Fake Book on Network Routing\",\r\n    \"price\":5595\r\n}\r\n```\r\n```\r\nappbase.index({\r\n    type: 'books',\r\n    id: '1',\r\n    body: jsonObject\r\n}).on('data', function(response) {\r\n    console.log(response);\r\n}).on('error', function(error) {\r\n    console.log(error);\r\n});\r\n```\r\n\r\nwhere ``type: 'books'`` indicate the collection (or table) inside which the data will be stored and the``id: '1'`` is an optional unique identifier.\r\n\r\nThe ``index()`` method (and all the other ``appbase`` methods) return a [stream](https://nodejs.org/api/stream.html#stream_class_stream_readable) object. A 'data' event handler can be used on the returned object (or in a chained fashion) for listening to all the data changes.\r\n\r\n> <span class=\"fa fa-info-circle\"></span> If you have noticed, SCALR uses the same APIs and data modeling conventions as [ElasticSearch](https://www.elastic.co/products/elasticsearch). A **type** is equivalent to a *collection in MongoDB* or a *table in SQL*, and a document is similar to the document in MongoDB and equivalent to a *row in SQL*.\r\n\r\n## Step 3: <s>GETing</s> err, Streaming Data\r\n\r\nNow that we are able to store data, let's try to get the data back from [appbase.io](https://appbase.io) with the ``readStream()`` method.\r\n\r\n```js\r\nappbase.readStream({\r\n      type: 'books',\r\n      id: '1'\r\n}).on('data', function(response) {\r\n      console.log(response)\r\n}).on('error', function(error) {\r\n      console.log(error)\r\n})\r\n\r\n\r\nINITIAL RESPONSE\r\n{\r\n  \"_index\": \"app`248\",\r\n  \"_type\": \"books\",\r\n  \"_id\": \"1\",\r\n  \"_version\": 5,\r\n  \"found\": true,\r\n  \"_source\": {\r\n    \"department_name\": \"Books\",\r\n    \"department_name_analyzed\": \"Books\",\r\n    \"department_id\": 1,\r\n    \"name\": \"A Fake Book on Network Routing\",\r\n    \"price\": 5595\r\n  }\r\n}\r\n```\r\n\r\nNow everytime there is a document update, our 'data' event handler will emit the document with the final value.\r\n\r"
         },
         {
            "title":"Step 1: Lib Setup\r",
            "link":"#-Quick-Start-to-the-![Scalr](http://i.imgur.com/Eppz2lz.png?1)-JS-API\r-Step-1:-Lib-Setup\r",
            "content":"\n## Step 1: Lib Setup\r\n\r\nWe will fetch and install the **appbase-js** lib using [bower](http://bower.io). We will use ``v0.8.0`` for specificity. \r\n\r\n```js\r\nbower install appbase-js#0.8.0\r\n```\r\n\r\nRequiring the lib takes just one line of html script injection:\r\n\r\n```html\r\n<script src=\"bower_components/appbase-js/browser/appbase.js\"></script>\r\n```\r\n\r\nTo write data or stream updates from [appbase.io](https://appbase.io), we need to first create a reference object. We do this by passing the API URL, appname, and a username:password combination into the ``Appbase`` constructor:\r\n\r\n```js\r\nvar appbase = new Appbase({\r\n  url: 'https://scalr.api.appbase.io',\r\n  appname: 'createnewtestapp01',\r\n  username: 'RIvfxo1u1',\r\n  password: 'dee8ee52-8b75-4b5b-be4f-9df3c364f59f'\r\n});\r\n\r\n```\r\n\r\n**OR**\r\n\r\n```js\r\nvar appbase = new Appbase({\r\n  url: 'https://RIvfxo1u1:dee8ee52-8b75-4b5b-be4f-9df3c364f59f@scalr.api.appbase.io',\r\n  appname: 'createnewtestapp01'\r\n })\r\n```\r\n\r\nAlternatively, username:password can be passed as a part of the API URL in the constructor.\r\n\r\n\r\n\r\n## Step 2: Storing Data\r\n\r\nOnce we have the reference object (called ``appbase`` in this tutorial), we can insert any JSON object into it with the ``index()`` method.\r\n\r\n\r\n```js\r\nvar jsonObject = {\r\n    \"department_name\":\"Books\",\r\n    \"department_name_analyzed\":\"Books\",\r\n    \"department_id\":1,\r\n    \"name\":\"A Fake Book on Network Routing\",\r\n    \"price\":5595\r\n}\r\n```\r\n```\r\nappbase.index({\r\n    type: 'books',\r\n    id: '1',\r\n    body: jsonObject\r\n}).on('data', function(response) {\r\n    console.log(response);\r\n}).on('error', function(error) {\r\n    console.log(error);\r\n});\r\n```\r\n\r\nwhere ``type: 'books'`` indicate the collection (or table) inside which the data will be stored and the``id: '1'`` is an optional unique identifier.\r\n\r\nThe ``index()`` method (and all the other ``appbase`` methods) return a [stream](https://nodejs.org/api/stream.html#stream_class_stream_readable) object. A 'data' event handler can be used on the returned object (or in a chained fashion) for listening to all the data changes.\r\n\r\n> <span class=\"fa fa-info-circle\"></span> If you have noticed, SCALR uses the same APIs and data modeling conventions as [ElasticSearch](https://www.elastic.co/products/elasticsearch). A **type** is equivalent to a *collection in MongoDB* or a *table in SQL*, and a document is similar to the document in MongoDB and equivalent to a *row in SQL*.\r\n\r\n## Step 3: <s>GETing</s> err, Streaming Data\r\n\r\nNow that we are able to store data, let's try to get the data back from [appbase.io](https://appbase.io) with the ``readStream()`` method.\r\n\r\n```js\r\nappbase.readStream({\r\n      type: 'books',\r\n      id: '1'\r\n}).on('data', function(response) {\r\n      console.log(response)\r\n}).on('error', function(error) {\r\n      console.log(error)\r\n})\r\n\r\n\r\nINITIAL RESPONSE\r\n{\r\n  \"_index\": \"app`248\",\r\n  \"_type\": \"books\",\r\n  \"_id\": \"1\",\r\n  \"_version\": 5,\r\n  \"found\": true,\r\n  \"_source\": {\r\n    \"department_name\": \"Books\",\r\n    \"department_name_analyzed\": \"Books\",\r\n    \"department_id\": 1,\r\n    \"name\": \"A Fake Book on Network Routing\",\r\n    \"price\": 5595\r\n  }\r\n}\r\n```\r\n\r\nNow everytime there is a document update, our 'data' event handler will emit the document with the final value.\r\n\r"
         },
         {
            "title":"Step 2: Storing Data\r",
            "link":"#-Quick-Start-to-the-![Scalr](http://i.imgur.com/Eppz2lz.png?1)-JS-API\r-Step-2:-Storing-Data\r",
            "content":"\n## Step 2: Storing Data\r\n\r\nOnce we have the reference object (called ``appbase`` in this tutorial), we can insert any JSON object into it with the ``index()`` method.\r\n\r\n\r\n```js\r\nvar jsonObject = {\r\n    \"department_name\":\"Books\",\r\n    \"department_name_analyzed\":\"Books\",\r\n    \"department_id\":1,\r\n    \"name\":\"A Fake Book on Network Routing\",\r\n    \"price\":5595\r\n}\r\n```\r\n```\r\nappbase.index({\r\n    type: 'books',\r\n    id: '1',\r\n    body: jsonObject\r\n}).on('data', function(response) {\r\n    console.log(response);\r\n}).on('error', function(error) {\r\n    console.log(error);\r\n});\r\n```\r\n\r\nwhere ``type: 'books'`` indicate the collection (or table) inside which the data will be stored and the``id: '1'`` is an optional unique identifier.\r\n\r\nThe ``index()`` method (and all the other ``appbase`` methods) return a [stream](https://nodejs.org/api/stream.html#stream_class_stream_readable) object. A 'data' event handler can be used on the returned object (or in a chained fashion) for listening to all the data changes.\r\n\r\n> <span class=\"fa fa-info-circle\"></span> If you have noticed, SCALR uses the same APIs and data modeling conventions as [ElasticSearch](https://www.elastic.co/products/elasticsearch). A **type** is equivalent to a *collection in MongoDB* or a *table in SQL*, and a document is similar to the document in MongoDB and equivalent to a *row in SQL*.\r\n\r\n## Step 3: <s>GETing</s> err, Streaming Data\r\n\r\nNow that we are able to store data, let's try to get the data back from [appbase.io](https://appbase.io) with the ``readStream()`` method.\r\n\r\n```js\r\nappbase.readStream({\r\n      type: 'books',\r\n      id: '1'\r\n}).on('data', function(response) {\r\n      console.log(response)\r\n}).on('error', function(error) {\r\n      console.log(error)\r\n})\r\n\r\n\r\nINITIAL RESPONSE\r\n{\r\n  \"_index\": \"app`248\",\r\n  \"_type\": \"books\",\r\n  \"_id\": \"1\",\r\n  \"_version\": 5,\r\n  \"found\": true,\r\n  \"_source\": {\r\n    \"department_name\": \"Books\",\r\n    \"department_name_analyzed\": \"Books\",\r\n    \"department_id\": 1,\r\n    \"name\": \"A Fake Book on Network Routing\",\r\n    \"price\": 5595\r\n  }\r\n}\r\n```\r\n\r\nNow everytime there is a document update, our 'data' event handler will emit the document with the final value.\r\n\r"
         },
         {
            "title":"Step 3: <s>GETing</s> err, Streaming Data\r",
            "link":"#-Quick-Start-to-the-![Scalr](http://i.imgur.com/Eppz2lz.png?1)-JS-API\r-Step-3:-<s>GETing</s>-err,-Streaming-Data\r",
            "content":"\n## Step 3: <s>GETing</s> err, Streaming Data\r\n\r\nNow that we are able to store data, let's try to get the data back from [appbase.io](https://appbase.io) with the ``readStream()`` method.\r\n\r\n```js\r\nappbase.readStream({\r\n      type: 'books',\r\n      id: '1'\r\n}).on('data', function(response) {\r\n      console.log(response)\r\n}).on('error', function(error) {\r\n      console.log(error)\r\n})\r\n\r\n\r\nINITIAL RESPONSE\r\n{\r\n  \"_index\": \"app`248\",\r\n  \"_type\": \"books\",\r\n  \"_id\": \"1\",\r\n  \"_version\": 5,\r\n  \"found\": true,\r\n  \"_source\": {\r\n    \"department_name\": \"Books\",\r\n    \"department_name_analyzed\": \"Books\",\r\n    \"department_id\": 1,\r\n    \"name\": \"A Fake Book on Network Routing\",\r\n    \"price\": 5595\r\n  }\r\n}\r\n```\r\n\r\nNow everytime there is a document update, our 'data' event handler will emit the document with the final value.\r\n\r"
         },
         {
            "title":"3.a: Modify the Document\r",
            "link":"#-Quick-Start-to-the-![Scalr](http://i.imgur.com/Eppz2lz.png?1)-JS-API\r-Step-3:-<s>GETing</s>-err,-Streaming-Data\r-3.a:-Modify-the-Document\r",
            "content":"3.a: Modify the Document\r\n\r\nLet's see this in action. We will modify the book price in our original ``jsonObject`` variable from 5595 to 6034.\r\n\r\n```js\r\nvar jsonObject = {\r\n    \"department_name\":\"Books\",\r\n    \"department_name_analyzed\":\"Books\",\r\n    \"department_id\":1,\r\n    \"name\":\"A Fake Book on Network Routing\",\r\n    \"price\":6034\r\n  }\r\n```\r\n\r"
         },
         {
            "title":"3.b: Observe the Streams\r",
            "link":"#-Quick-Start-to-the-![Scalr](http://i.imgur.com/Eppz2lz.png?1)-JS-API\r-Step-3:-<s>GETing</s>-err,-Streaming-Data\r-3.b:-Observe-the-Streams\r",
            "content":"3.b: Observe the Streams\r\n\r\n```js\r\nRESPONSE AFTER 3.a\r\n{\r\n  \"_type\": \"books\",\r\n  \"_id\": \"1\",\r\n  \"_source\": {\r\n    \"department_id\": 1,\r\n    \"department_name\": \"Books\",\r\n    \"department_name_analyzed\": \"Books\",\r\n    \"name\": \"A Fake Book on Network Routing\",\r\n    \"price\": 6034\r\n  }\r\n}\r\n```\r\n\r\nIn the new document update, we can see the price change (5595 -> 6034) being reflected. Subsequent changes will be streamed as JSON objects.\r\n\r\n``Note:`` Appbase always streams the final state of an object, and not the diff b/w the old state and the new state. You can compute diffs on the client side by keeping the state using the composition of (_type, _id) fields.\r\n\r\n\r"
         },
         {
            "title":"Step 4: Streaming Rich Queries\r",
            "link":"#-Quick-Start-to-the-![Scalr](http://i.imgur.com/Eppz2lz.png?1)-JS-API\r-Step-4:-Streaming-Rich-Queries\r",
            "content":"\n### 3.a: Modify the Document\r\n\r\nLet's see this in action. We will modify the book price in our original ``jsonObject`` variable from 5595 to 6034.\r\n\r\n```js\r\nvar jsonObject = {\r\n    \"department_name\":\"Books\",\r\n    \"department_name_analyzed\":\"Books\",\r\n    \"department_id\":1,\r\n    \"name\":\"A Fake Book on Network Routing\",\r\n    \"price\":6034\r\n  }\r\n```\r\n\r\n### 3.b: Observe the Streams\r\n\r\n```js\r\nRESPONSE AFTER 3.a\r\n{\r\n  \"_type\": \"books\",\r\n  \"_id\": \"1\",\r\n  \"_source\": {\r\n    \"department_id\": 1,\r\n    \"department_name\": \"Books\",\r\n    \"department_name_analyzed\": \"Books\",\r\n    \"name\": \"A Fake Book on Network Routing\",\r\n    \"price\": 6034\r\n  }\r\n}\r\n```\r\n\r\nIn the new document update, we can see the price change (5595 -> 6034) being reflected. Subsequent changes will be streamed as JSON objects.\r\n\r\n``Note:`` Appbase always streams the final state of an object, and not the diff b/w the old state and the new state. You can compute diffs on the client side by keeping the state using the composition of (_type, _id) fields.\r\n\r\n\r"
         }
      ]
   }
]